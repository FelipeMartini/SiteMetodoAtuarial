// Modelo padrão para autenticação com Auth.js (NextAuth) e Prisma
// Inclui User, Account, Session e VerificationToken
// Você pode expandir conforme necessidade do projeto

generator client {
  provider = "prisma-client-js"
}

// Para desenvolvimento local, utilizamos SQLite por simplicidade.
// Para migrar para PostgreSQL no futuro, basta alterar o provider para "postgresql" e ajustar a DATABASE_URL no .env.
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para autenticação por credenciais
  accessLevel   Int       @default(1) // Sistema de níveis: 1=Normal, 2=Premium, 3=Manager, 4=Admin, 5=SuperAdmin
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Comentário: Este schema cobre o fluxo padrão de autenticação do Auth.js/NextAuth com Prisma. Adapte conforme necessidade.
