generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// üë§ Modelo de usu√°rio atualizado com sistema de roles unificado
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  // üîê Sistema de autoriza√ß√£o unificado
  accessLevel   Int       @default(1)          // Compatibilidade: mant√©m sistema legado
  role          UserRole  @default(USER)       // Novo: sistema de roles moderno
  isActive      Boolean   @default(true)
  
  // üìä Metadados e auditoria
  lastLogin     DateTime?
  loginCount    Int       @default(0)         // Contador de logins
  failedLogins  Int       @default(0)         // Tentativas de login falharam
  lastFailedLogin DateTime?                   // √öltimo login com falha
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // üîó Relacionamentos Auth.js v5
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  
  // üîê TOTP/MFA (preservado do sistema existente)
  totpSecret    String?   @map("totp_secret")
  mfaEnabled    Boolean   @default(false)     // Flag MFA ativo
  
  // üìù Auditoria e logs
  auditLogs     AuditLog[]
  
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([accessLevel])
}

// üé≠ Enum de roles do sistema (substitui accessLevel gradualmente)
enum UserRole {
  GUEST       // Visitante (accessLevel 0)
  USER        // Usu√°rio padr√£o (accessLevel 1-49)
  MODERATOR   // Moderador (accessLevel 50-99)
  ADMIN       // Administrador (accessLevel 100+)
}

// üîë Authenticator para WebAuthn/Passkeys
model Authenticator {
  credentialID         String   @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
  @@index([providerAccountId])
}

// üîó Contas OAuth vinculadas (Auth.js v5)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

// üìä Sess√µes de usu√°rio (Database Sessions)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expires])
}

// üîê Tokens de verifica√ß√£o (email, reset password, etc.)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

// üìã Sistema de auditoria e logs de seguran√ßa
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    AuditAction
  target    String?
  details   String?  // JSON com detalhes da a√ß√£o
  ipAddress String?  // IP do usu√°rio
  userAgent String?  // User agent do browser
  success   Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([success])
}

// üéØ Enum de a√ß√µes de auditoria
enum AuditAction {
  // Autentica√ß√£o
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  SIGNUP
  PASSWORD_CHANGE
  EMAIL_CHANGE
  
  // OAuth
  OAUTH_LINK
  OAUTH_UNLINK
  
  // MFA/TOTP
  MFA_ENABLE
  MFA_DISABLE
  TOTP_VERIFY
  
  // Administra√ß√£o
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  USER_ACTIVATE
  USER_DEACTIVATE
  ROLE_CHANGE
  
  // Sistema
  SESSION_CREATE
  SESSION_DELETE
  ACCOUNT_LINK
  ACCOUNT_UNLINK
}
