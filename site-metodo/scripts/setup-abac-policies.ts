#!/usr/bin/env npx tsx

/**
 * üõ°Ô∏è SETUP INICIAL DE POL√çTICAS ABAC/ASIC
 * =======================================
 * 
 * Script para configurar pol√≠ticas b√°sicas do sistema ABAC
 * - Pol√≠ticas para usu√°rio admin felipemartinii@gmail.com
 * - Permiss√µes para sess√£o, admin dashboard, √°rea cliente
 */

import { prisma } from '../src/lib/prisma'
import { addABACPolicy, reloadABACPolicies } from '../src/lib/abac/enforcer-abac-puro'

async function setupABACPolicies() {
  console.log('üöÄ Iniciando setup de pol√≠ticas ABAC...')

  try {
  // 1. Pol√≠tica admin universal para felipemartinii@gmail.com
  const adminEmail = 'felipemartinii@gmail.com'
  // Verifica exist√™ncia antes de adicionar para evitar duplicatas
  async function ensurePolicy(subject: string, object: string, action: string, effect: 'allow' | 'deny' = 'allow', context?: Record<string, unknown>) {
    const exists = await prisma.casbinRule.findFirst({ where: { v0: subject, v1: object, v2: action, v3: effect } })
    if (exists) {
      console.log('policy exists, skipping', { subject, object, action, effect })
      return
    }
    await addABACPolicy(subject, object, action, effect, context)
  }

  await ensurePolicy(adminEmail, '*', '*', 'allow', { department: 'admin', location: '*', time: '*' })

  // 2. Pol√≠tica para acesso de sess√£o (admin explicit)
  await ensurePolicy(adminEmail, 'session:read', 'read', 'allow', { time: '*', location: '*' })
  await ensurePolicy(adminEmail, 'session:write', 'write', 'allow', { time: '*', location: '*' })

  // 4. Pol√≠tica para admin:abac (admin explicit)
  await ensurePolicy(adminEmail, 'admin:abac', 'read', 'allow', { time: '*', location: '*' })
  await ensurePolicy(adminEmail, 'admin:abac', 'write', 'allow', { time: '*', location: '*' })

  // 5. Pol√≠tica espec√≠fica para endpoint ABAC check (admin only)
  await ensurePolicy(adminEmail, 'api:abac:check', 'read', 'allow', { time: '*', location: '*' })

    // Recarregar pol√≠ticas
    await reloadABACPolicies()

    console.log('‚úÖ Pol√≠ticas ABAC configuradas com sucesso!')
    
    // Listar pol√≠ticas criadas
    const policies = await prisma.casbinRule.findMany()
    console.log(`üìã Total de pol√≠ticas: ${policies.length}`)
    
    policies.forEach((policy: any, index: number) => {
      console.log(`${index + 1}. ${policy.ptype} ${policy.v0} ${policy.v1} ${policy.v2} ${policy.v3}`)
    })

  } catch (error) {
    console.error('‚ùå Erro ao configurar pol√≠ticas ABAC:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Executar setup
setupABACPolicies()
