generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isActive      Boolean   @default(true)
  department    String?
  location      String?
  jobTitle      String?
  validFrom     DateTime?
  validUntil    DateTime?
  mfaEnabled    Boolean   @default(false)
  loginCount    Int       @default(0)
  failedLogins  Int       @default(0)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  accessLogs     AccessLog[]
  notifications  Notification[]
  emailLogs      EmailLog[]
  calculos       CalculoAtuarial[]

  @@map("users")
}

model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}

model AuthorizationPolicy {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  object      String
  action      String
  effect      String
  conditions  String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("authorization_policies")
}

model AccessLog {
  id        String   @id @default(cuid())
  userId    String?
  subject   String
  object    String
  action    String
  resource  String?
  allowed   Boolean
  ip        String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("access_logs")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   // 'info', 'success', 'warning', 'error'
  priority  String   // 'low', 'normal', 'high', 'urgent'
  read      Boolean  @default(false)
  readAt    DateTime?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model EmailLog {
  id        String   @id @default(cuid())
  to        String
  subject   String
  messageId String?
  status    String   // 'sent', 'failed', 'pending'
  error     String?
  priority  String   @default("normal")
  userId    String?
  sentAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("email_logs")
}

model TabuaMortalidade {
  id            String   @id @default(cuid())
  nome          String   @unique
  ano           Int
  fonte         String
  sexo          String   // 'M', 'F', 'AMBOS'
  status        String   @default("ativa") // 'ativa', 'inativa', 'descontinuada'
  descricao     String?
  observacao    String?
  dataImportacao DateTime @default(now())
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt

  taxas         TaxaMortalidade[]
  calculos      CalculoAtuarial[]

  @@map("tabuas_mortalidade")
}

model TaxaMortalidade {
  id       String  @id @default(cuid())
  tabuaId  String
  idade    Int
  qx       Float   // Probabilidade de morte
  lx       Float?  // Número de sobreviventes
  dx       Float?  // Número de mortes
  ex       Float?  // Expectativa de vida
  px       Float?  // Probabilidade de sobrevivência (1 - qx)
  observacao String?

  tabua    TabuaMortalidade @relation(fields: [tabuaId], references: [id], onDelete: Cascade)

  @@unique([tabuaId, idade])
  @@map("taxas_mortalidade")
}

model CalculoAtuarial {
  id            String   @id @default(cuid())
  tipo          String   // 'seguro_vida', 'renda_vitalicia', 'reserva', 'expectativa'
  parametros    Json     // Parâmetros utilizados no cálculo
  resultado     Json     // Resultado do cálculo
  tabuaId       String?
  userId        String?
  dataCalculo   DateTime @default(now())
  observacao    String?

  tabua         TabuaMortalidade? @relation(fields: [tabuaId], references: [id], onDelete: SetNull)
  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("calculos_atuariais")
}