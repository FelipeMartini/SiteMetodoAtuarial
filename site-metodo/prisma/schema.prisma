generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                       @id @default(cuid())
  name                    String?
  email                   String                       @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  isActive                Boolean                      @default(true)
  department              String?
  location                String?
  jobTitle                String?
  validFrom               DateTime?
  validUntil              DateTime?
  mfaEnabled              Boolean                      @default(false)
  loginCount              Int                          @default(0)
  failedLogins            Int                          @default(0)
  lastLoginAt             DateTime?
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @updatedAt
  accessLogs              AccessLog[]
  accounts                Account[]
  calculos                CalculoAtuarial[]
  emailLogs               EmailLog[]
  mfaConfig               MfaConfig?
  notifications           Notification[]
  sessions                Session[]
  notificationPreferences UserNotificationPreferences?

  @@map("users")
}

model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}

model AuthorizationPolicy {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  object      String
  action      String
  effect      String
  conditions  String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("authorization_policies")
}

model AccessLog {
  id        String   @id @default(cuid())
  userId    String?
  subject   String
  object    String
  action    String
  resource  String?
  allowed   Boolean
  ip        String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("access_logs")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  priority  String
  status    String    @default("sent")
  read      Boolean   @default(false)
  readAt    DateTime?
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model EmailLog {
  id           String    @id @default(cuid())
  to           String
  cc           String?
  bcc          String?
  subject      String
  templateType String?
  messageId    String?
  status       String
  error        String?
  priority     String    @default("normal")
  metadata     Json?
  userId       String?
  sentAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User?     @relation(fields: [userId], references: [id])

  @@map("email_logs")
}

model UserNotificationPreferences {
  id         String   @id @default(cuid())
  userId     String   @unique
  email      Boolean  @default(true)
  inApp      Boolean  @default(true)
  push       Boolean  @default(false)
  sms        Boolean  @default(false)
  security   Boolean  @default(true)
  newsletter Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}

model TabuaMortalidade {
  id             String            @id @default(cuid())
  nome           String            @unique
  ano            Int
  fonte          String
  sexo           String
  status         String            @default("ativa")
  descricao      String?
  observacao     String?
  dataImportacao DateTime          @default(now())
  criadoEm       DateTime          @default(now())
  atualizadoEm   DateTime          @updatedAt
  calculos       CalculoAtuarial[]
  taxas          TaxaMortalidade[]

  @@map("tabuas_mortalidade")
}

model TaxaMortalidade {
  id         String           @id @default(cuid())
  tabuaId    String
  idade      Int
  qx         Float
  lx         Float?
  dx         Float?
  ex         Float?
  px         Float?
  observacao String?
  tabua      TabuaMortalidade @relation(fields: [tabuaId], references: [id], onDelete: Cascade)

  @@unique([tabuaId, idade])
  @@map("taxas_mortalidade")
}

model CalculoAtuarial {
  id          String            @id @default(cuid())
  tipo        String
  parametros  Json
  resultado   Json
  tabuaId     String?
  userId      String?
  dataCalculo DateTime          @default(now())
  observacao  String?
  user        User?             @relation(fields: [userId], references: [id])
  tabua       TabuaMortalidade? @relation(fields: [tabuaId], references: [id])

  @@map("calculos_atuariais")
}

model MfaConfig {
  id           String    @id @default(cuid())
  userId       String    @unique
  totpSecret   String?
  totpEnabled  Boolean   @default(false)
  emailEnabled Boolean   @default(false)
  smsEnabled   Boolean   @default(false)
  backupCodes  Json?
  lastUsedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mfa_config")
}

model MfaLog {
  id        String   @id @default(cuid())
  userId    String
  method    String
  success   Boolean
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@map("mfa_logs")
}

// ========================================
// NOVAS TABELAS PARA AN√ÅLISE DE MORTALIDADE
// ========================================

model MassaParticipantes {
  id                String                @id @default(cuid())
  matricula         String                @unique
  nome              String?
  sexo              Int                   // 1 = masculino, 2 = feminino
  idade             Int
  dataNascimento    DateTime?
  anoIngressao      Int
  anoCadastro       Int
  categoria         String?
  salario           Float?
  situacao          String?               @default("ATIVO") // ATIVO, APOSENTADO, PENSIONISTA
  dataUltimaAtu     DateTime              @default(now())
  importacaoId      String?
  observacoes       String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  obitos            ObitoRegistrado[]
  calculos          CalculoMortalidade[]
  importacao        ImportacaoMortalidade? @relation(fields: [importacaoId], references: [id])

  @@index([sexo, idade])
  @@index([situacao])
  @@index([anoIngressao])
  @@map("massa_participantes")
}

model ObitoRegistrado {
  id                String             @id @default(cuid())
  matricula         String
  participanteId    String?
  anoObito          Int
  mesObito          Int?
  idadeObito        Int
  causaObito        String?
  tipoObito         String?            @default("NATURAL") // NATURAL, ACIDENTAL
  dataRegistro      DateTime           @default(now())
  importacaoId      String?
  observacoes       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  participante      MassaParticipantes? @relation(fields: [participanteId], references: [id])
  calculos          CalculoMortalidade[]
  importacao        ImportacaoMortalidade? @relation(fields: [importacaoId], references: [id])

  @@index([anoObito])
  @@index([idadeObito])
  @@index([matricula])
  @@map("obitos_registrados")
}

model TabuaMortalidadeRef {
  id               String                  @id @default(cuid())
  nome             String                  @unique
  descricao        String?
  anoBase          Int
  origem           String?                 // SUSEP, SOA, HMD, etc
  tipo             String?                 @default("VIDA") // VIDA, INVALIDEZ, etc
  populacao        String?                 // GERAL, SEGURADOS, etc
  observacoes      String?
  ativa            Boolean                 @default(true)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  qxValores        QxMortalidade[]
  analises         AnaliseAderencia[]

  @@map("tabuas_mortalidade_ref")
}

model QxMortalidade {
  id               String                @id @default(cuid())
  tabuaId          String
  idade            Int
  qxMasculino      Float?
  qxFeminino       Float?
  qxGeral          Float?
  lxMasculino      Float?
  lxFeminino       Float?
  lxGeral          Float?
  exMasculino      Float?
  exFeminino       Float?
  exGeral          Float?
  observacoes      String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  tabua            TabuaMortalidadeRef   @relation(fields: [tabuaId], references: [id], onDelete: Cascade)

  @@unique([tabuaId, idade])
  @@index([idade])
  @@map("qx_mortalidade")
}

model AnaliseAderencia {
  id                    String                    @id @default(cuid())
  nome                  String
  descricao             String?
  tabuaRefId            String
  tipoAnalise           String                    @default("CHI_QUADRADO")
  nivelSignificancia    Float                     @default(0.05)
  intervalIdade         Int                       @default(5) // 5, 10, etc
  idadeMinima           Int?
  idadeMaxima           Int?
  agruparPorSexo        Boolean                   @default(true)
  configuracao          Json?                     // Par√¢metros espec√≠ficos
  resultado             Json?                     // Resultados da an√°lise
  status                String                    @default("PENDENTE") // PENDENTE, PROCESSANDO, CONCLUIDA, ERRO
  dataExecucao          DateTime?
  tempoProcessamento    Int?                      // em segundos
  userId                String?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  tabuaRef              TabuaMortalidadeRef       @relation(fields: [tabuaRefId], references: [id])
  calculos              CalculoMortalidade[]
  relatorios            RelatorioAderencia[]

  @@index([status])
  @@index([dataExecucao])
  @@map("analises_aderencia")
}

model CalculoMortalidade {
  id                    String               @id @default(cuid())
  analiseId             String
  participanteId        String?
  obitoId               String?
  faixaEtaria           String               // "25-29", "30-34", etc
  sexo                  Int
  idade                 Int
  qxEsperado            Float
  qxObservado           Float?
  obitosEsperados       Float
  obitosObservados      Int
  contribuicaoChiQuad   Float?
  residuoPadronizado    Float?
  observacoes           String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  analise               AnaliseAderencia     @relation(fields: [analiseId], references: [id], onDelete: Cascade)
  participante          MassaParticipantes?  @relation(fields: [participanteId], references: [id])
  obito                 ObitoRegistrado?     @relation(fields: [obitoId], references: [id])

  @@index([analiseId])
  @@index([faixaEtaria])
  @@index([sexo])
  @@map("calculos_mortalidade")
}

model RelatorioAderencia {
  id              String            @id @default(cuid())
  analiseId       String
  tipo            String            @default("COMPLETO") // COMPLETO, RESUMIDO, EXECUTIVO
  formato         String            @default("PDF") // PDF, EXCEL, HTML
  conteudo        Json?             // Estrutura do relat√≥rio
  caminhoArquivo  String?
  tamanhoArquivo  Int?
  geradoEm        DateTime          @default(now())
  baixadoEm       DateTime?
  userId          String?
  observacoes     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  analise         AnaliseAderencia  @relation(fields: [analiseId], references: [id], onDelete: Cascade)

  @@index([analiseId])
  @@index([tipo])
  @@map("relatorios_aderencia")
}

model ImportacaoMortalidade {
  id                    String                @id @default(cuid())
  nomeArquivo           String
  tipoArquivo           String                @default("EXCEL") // EXCEL, CSV
  tamanhoArquivo        Int
  caminhoArquivo        String?
  status                String                @default("PENDENTE") // PENDENTE, PROCESSANDO, CONCLUIDA, ERRO
  totalRegistros        Int?
  registrosImportados   Int?
  registrosErro         Int?
  logImportacao         Json?                 // Detalhes do processo
  iniciadaEm            DateTime              @default(now())
  concluidaEm           DateTime?
  tempoProcessamento    Int?                  // em segundos
  userId                String?
  observacoes           String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  participantes         MassaParticipantes[]
  obitos                ObitoRegistrado[]

  @@index([status])
  @@index([iniciadaEm])
  @@map("importacoes_mortalidade")
}
