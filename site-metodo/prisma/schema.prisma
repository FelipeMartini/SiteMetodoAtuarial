generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// üë§ Modelo de usu√°rio atualizado com sistema de roles unificado
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  // üîê Sistema de autoriza√ß√£o unificado
  accessLevel   Int       @default(1)          // Compatibilidade: mant√©m sistema legado
  roleType      UserRoleType @default(USER)    // Novo: sistema de roles moderno
  isActive      Boolean   @default(true)
  
  // üìä Metadados e auditoria
  lastLogin     DateTime?
  loginCount    Int       @default(0)         // Contador de logins
  failedLogins  Int       @default(0)         // Tentativas de login falharam
  lastFailedLogin DateTime?                   // √öltimo login com falha
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // üîó Relacionamentos Auth.js v5
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  
  // üîê Sistema ABAC - Relacionamentos
  userRoles     UserRole[]
  
  // üîê TOTP/MFA (preservado do sistema existente)
  totpSecret    String?   @map("totp_secret")
  mfaEnabled    Boolean   @default(false)     // Flag MFA ativo
  
  // üìù Auditoria e logs
  auditLogs     AuditLog[]
  
  // üîî Sistema de Notifica√ß√µes
  notifications          Notification[]
  notificationPreferences NotificationPreference[]
  pushSubscriptions      PushSubscription[]
  notificationEvents     NotificationEvent[]
  
  @@index([email])
  @@index([roleType])
  @@index([isActive])
  @@index([accessLevel])
}

// üé≠ Enum de tipos de roles do sistema (substitui accessLevel gradualmente)
enum UserRoleType {
  GUEST       // Visitante (accessLevel 0)
  USER        // Usu√°rio padr√£o (accessLevel 1-49)
  MODERATOR   // Moderador (accessLevel 50-99)
  ADMIN       // Administrador (accessLevel 100+)
}

// üîë Authenticator para WebAuthn/Passkeys
model Authenticator {
  credentialID         String   @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
  @@index([providerAccountId])
}

// üîó Contas OAuth vinculadas (Auth.js v5)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

// üìä Sess√µes de usu√°rio (Database Sessions)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expires])
}

// üîê Tokens de verifica√ß√£o (email, reset password, etc.)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

// üìã Sistema de auditoria e logs de seguran√ßa
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    AuditAction
  target    String?
  details   String?  // JSON com detalhes da a√ß√£o
  ipAddress String?  // IP do usu√°rio
  userAgent String?  // User agent do browser
  success   Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([success])
}

// üéØ Enum de a√ß√µes de auditoria
enum AuditAction {
  // Autentica√ß√£o
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  SIGNUP
  PASSWORD_CHANGE
  EMAIL_CHANGE
  
  // OAuth
  OAUTH_LINK
  OAUTH_UNLINK
  
  // MFA/TOTP
  MFA_ENABLE
  MFA_DISABLE
  TOTP_VERIFY
  
  // Administra√ß√£o
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  USER_ACTIVATE
  USER_DEACTIVATE
  ROLE_CHANGE
  
  // Sistema
  SESSION_CREATE
  SESSION_DELETE
  ACCOUNT_LINK
  ACCOUNT_UNLINK
}

// üîê Sistema ABAC/Casbin - Roles
model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  attributes  String? // JSON com atributos do role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  userRoles   UserRole[]
  
  @@index([name])
}

// üîó Relacionamento usu√°rio-role (many-to-many)
model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  // Metadados
  assignedAt DateTime @default(now())
  assignedBy String?  // ID do usu√°rio que atribuiu o role
  expiresAt  DateTime? // Role tempor√°rio
  isActive   Boolean @default(true)
  
  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([isActive])
}

// üõ°Ô∏è Pol√≠ticas de autoriza√ß√£o ABAC
model AuthorizationPolicy {
  id         String @id @default(cuid())
  subject    String // Usu√°rio, role ou atributo
  object     String // Recurso ou padr√£o de recurso
  action     String // A√ß√£o permitida
  effect     PolicyEffect @default(allow)
  conditions String? // Condi√ß√µes ABAC em formato JSON
  description String?
  isActive   Boolean @default(true)
  
  // Metadados
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String? // ID do usu√°rio que criou a pol√≠tica
  
  @@index([subject])
  @@index([object])
  @@index([action])
  @@index([effect])
  @@index([isActive])
}

// üìä Enum para efeito das pol√≠ticas
enum PolicyEffect {
  allow
  deny
}

// üìà Logs de acesso e autoriza√ß√£o
model AccessLog {
  id         String @id @default(cuid())
  userId     String?
  resource   String
  action     String
  result     AccessResult
  reason     String? // Motivo da decis√£o
  policies   String? // JSON com pol√≠ticas aplicadas
  context    String? // JSON com contexto da requisi√ß√£o
  
  // Metadados de request
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  
  @@index([userId])
  @@index([resource])
  @@index([action])
  @@index([result])
  @@index([timestamp])
}

// üéØ Enum para resultado de acesso
enum AccessResult {
  allow
  deny
}

// üîî SISTEMA DE NOTIFICA√á√ïES
// =========================

// üì¨ Notifica√ß√µes principais
model Notification {
  id          String             @id @default(cuid())
  userId      String
  type        NotificationType
  channel     NotificationChannel
  priority    NotificationPriority @default(normal)
  status      NotificationStatus   @default(pending)
  
  // Conte√∫do
  title       String
  message     String
  data        String?             // JSON com dados adicionais
  
  // Timestamps
  scheduledFor DateTime?          // Agendamento
  sentAt      DateTime?           // Quando foi enviada
  readAt      DateTime?           // Quando foi lida
  expiresAt   DateTime?           // Expira√ß√£o
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relacionamentos
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  queueItems  NotificationQueue[]
  events      NotificationEvent[]
  
  @@index([userId])
  @@index([type])
  @@index([channel])
  @@index([status])
  @@index([priority])
  @@index([scheduledFor])
  @@index([sentAt])
  @@index([createdAt])
  @@index([expiresAt])
}

// üìù Templates de notifica√ß√£o
model NotificationTemplate {
  id           String             @id @default(cuid())
  name         String             @unique
  type         NotificationType
  channel      NotificationChannel
  
  // Conte√∫do do template
  subject      String?            // Para emails
  htmlTemplate String?            // Template HTML
  textTemplate String?            // Template texto
  variables    String             // JSON array com vari√°veis dispon√≠veis
  
  // Metadados
  description  String?
  category     String?
  isActive     Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  @@index([type])
  @@index([channel])
  @@index([isActive])
  @@index([category])
}

// ‚öôÔ∏è Prefer√™ncias de notifica√ß√£o por usu√°rio
model NotificationPreference {
  id        String             @id @default(cuid())
  userId    String
  channel   NotificationChannel
  type      NotificationType
  enabled   Boolean            @default(true)
  frequency String?            // immediate, daily, weekly, monthly
  
  // Hor√°rio de sil√™ncio
  quietHoursStart String?      // HH:mm
  quietHoursEnd   String?      // HH:mm
  timezone        String?      // Timezone do usu√°rio
  
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  
  // Relacionamentos
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, channel, type])
  @@index([userId])
  @@index([channel])
  @@index([type])
  @@index([enabled])
}

// üì± Subscri√ß√µes para push notifications
model PushSubscription {
  id         String   @id @default(cuid())
  userId     String
  endpoint   String   @unique
  p256dh     String   // Chave de criptografia
  auth       String   // Chave de autentica√ß√£o
  userAgent  String?  // Browser/device info
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relacionamentos
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
}

// üìÆ Fila de processamento de notifica√ß√µes
model NotificationQueue {
  id             String              @id @default(cuid())
  notificationId String
  priority       NotificationPriority @default(normal)
  attempts       Int                 @default(0)
  maxAttempts    Int                 @default(3)
  nextRetry      DateTime?
  error          String?             // √öltimo erro
  status         String              @default("pending") // pending, processing, completed, failed
  
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  
  // Relacionamentos
  notification   Notification        @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  @@index([notificationId])
  @@index([status])
  @@index([priority])
  @@index([nextRetry])
  @@index([createdAt])
}

// üìä Eventos de notifica√ß√£o (para analytics)
model NotificationEvent {
  id             String             @id @default(cuid())
  notificationId String
  userId         String
  type           String             // sent, delivered, read, clicked, failed
  channel        NotificationChannel
  metadata       String?            // JSON com dados adicionais
  timestamp      DateTime           @default(now())
  
  // Relacionamentos
  notification   Notification       @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([notificationId])
  @@index([userId])
  @@index([type])
  @@index([channel])
  @@index([timestamp])
}

// üì® Templates de email espec√≠ficos
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  html        String   // Template HTML
  text        String?  // Vers√£o texto
  variables   String   // JSON array com vari√°veis
  category    String?  // Categoria do template
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
  @@index([isActive])
}

// üîî Enums para notifica√ß√µes
enum NotificationType {
  info
  success
  warning
  error
  security
  system
  user_action
  marketing
}

enum NotificationChannel {
  in_app
  email
  push
  sms
  webhook
}

enum NotificationStatus {
  pending
  sent
  delivered
  read
  failed
  cancelled
}

enum NotificationPriority {
  low
  normal
  high
  urgent
}
