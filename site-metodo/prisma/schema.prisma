generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String?     @unique
  name          String?
  emailVerified DateTime?
  image         String?
  password      String?
  isActive      Boolean     @default(true)
  department    String?
  location      String?
  jobTitle      String?
  validFrom     DateTime?
  validUntil    DateTime?
  mfaEnabled    Boolean     @default(false)
  loginCount    Int         @default(0)
  failedLogins  Int         @default(0)
  lastLoginAt   DateTime?
  lastLoginIP   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  AccessLog     AccessLog[]
  accounts      Account[]
  sessions      Session[]
  notifications Notification[]

  @@map("users")
}

model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}

model AuthorizationPolicy {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  object      String
  action      String
  effect      String
  conditions  String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("authorization_policies")
}

model AccessLog {
  id        String   @id @default(cuid())
  userId    String?
  subject   String
  object    String
  action    String
  allowed   Boolean
  ip        String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("access_logs")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("info") // info, success, warning, error
  priority  String   @default("normal") // low, normal, high, urgent
  read      Boolean  @default(false)
  readAt    DateTime?
  metadata  String? // JSON metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
