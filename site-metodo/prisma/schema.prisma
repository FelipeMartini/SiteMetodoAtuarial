generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// üë§ MODELO DE USU√ÅRIO - APENAS ATRIBUTOS ABAC
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  password      String?
  isActive      Boolean   @default(true)
  
  // üéØ ATRIBUTOS ABAC
  department    String?   // Departamento para contexto ABAC
  location      String?   // Localiza√ß√£o para contexto ABAC  
  jobTitle      String?   // Cargo para contexto ABAC
  validFrom     DateTime? // Per√≠odo de validade in√≠cio
  validUntil    DateTime? // Per√≠odo de validade fim
  
  // üîê SEGURAN√áA
  mfaEnabled    Boolean   @default(false)
  loginCount    Int       @default(0)
  failedLogins  Int       @default(0)
  lastLoginAt   DateTime?
  lastLoginIP   String?
  
  // üìä AUDITORIA
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // üîó RELACIONAMENTOS
  accounts      Account[]
  sessions      Session[]
  AccessLog     AccessLog[]
  
  @@map("users")
}

// üîê TABELA CASBIN PARA POL√çTICAS ABAC
model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}

// üìã POL√çTICAS DE AUTORIZA√á√ÉO (BACKUP/ADMIN)
model AuthorizationPolicy {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String   // Ex: "dept:admin", "user:123"
  object      String   // Ex: "resource:users", "resource:system"
  action      String   // Ex: "read", "write", "delete"
  effect      String   // "allow" ou "deny"
  conditions  String?  // JSON com condi√ß√µes adicionais
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("authorization_policies")
}

// üìú LOG DE ACESSO ABAC
model AccessLog {
  id          String   @id @default(cuid())
  userId      String?
  subject     String   // Sujeito da requisi√ß√£o ABAC
  object      String   // Objeto acessado
  action      String   // A√ß√£o realizada
  allowed     Boolean  // Se foi permitido
  ip          String?
  userAgent   String?
  timestamp   DateTime @default(now())
  
  // üîó RELACIONAMENTOS
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("access_logs")
}

// üîë CONTAS OAUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// üé´ SESS√ïES
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ‚úÖ TOKENS DE VERIFICA√á√ÉO
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
